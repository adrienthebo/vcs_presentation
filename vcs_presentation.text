title: Version Control Systems
author: Adrien Thebo
copyright: Copyright 2012 Adrien Thebo, licensed under Creative Commons BY/NC/SA
duration: 120
code-engine: coderay

Version Control Systems
=======================

Making dumb mistakes faster, without fear
-----------------------------------------

![Coffee](./images/drink_coffee.jpg)

!SLIDE

Introduction
------------

What is Version Control?
========================

  * A Version Control System, or VCS, is a tool used to track changes to files
  * Allows you to manage code or documents as you work
    * Make changes in incremental steps
    * View changes
    * Revert errors
  * Greatly simplifies collaboration

Why Should You Care?
====================

  * Try out experimental ideas without destroying your code base
  * Resolve mistakes by switching to the last working copy
  * Find the change that introduced a bug
  * Have VCS merge your changes with classmates instead of by hand
  * Use VCS as a backup system!
    * "Wait, you **didn't** want that file deleted?"

Why Should You Care?
====================

  * Any sane developer uses VCS
    * Github
    * Gitorious
    * Mercurial
    * code.googte.com
    * Sourceforge
    * et cetera...
  * Version control systems are the life blood of open source
    * Reduces barrier to entry
    * Easier to manage contributions

Why Should You Care?
====================

In general, if you are writing more than a few lines of code and not using
version control...

**YOU ARE DOING IT WRONG.**

**PERIOD.**

!SLIDE

Background
----------

Before VCS
==========

Living dangerously!

<% coderay :lang => :sh do %>
    vim really_complex_algorithm.c
<% end %>

*three hours later:*

<% coderay :lang => :sh do %>
    rm -rf *
<% end %>

Whoops.

Do It Yourself VCS
==================

Early implementations of version control was done by copying files

<% coderay :lang => :sh do %>
    vim really_complex_algorithm.c
    cp really_complex_algorithm.c really_complex_algorithm.c.1
    vim really_complex_algorithm.c
    cp really_complex_algorithm.c really_complex_algorithm.c.2
    vim really_complex_algorithm.c
    cp really_complex_algorithm.c really_complex_algorithm.c.3
<% end %>

This wouldn't get tedious at all!

The beginning of VCS
====================

  * Initial idea of VCS came from engineering
  * Engineers would create blueprints, and save earlier revisions
  * If a version was not liked, it was trivial to roll back
  * Revision control was also applied in business, law
  * Any place where you may need to backtrack on a document, VCS will show up

Concerns with VCS
=================

  * Any VCS has to deal with some basic concerns
    * Merging changes
    * Locking files
    * Atomic commits
  * Each VCS handles these concerns differently

!SLIDE

A Tour of Version Control Systems
---------------------------------


Source Code Control System (SCCS)
=================================

  * Arguably the first VCS system available
  * Developed by Bell Labs in 1972
    * For some comparison, C was written in 1972 at Bell Labs as well
  * SCCS was the dominant VCS until the advent of RCS
  * Generally considered obsolete, and only mentioned for historical purposes
  * Except for the storage method - still used today

[Wikipedia: Source Code Control System](http://en.wikipedia.org/wiki/Source_Code_Control_System)

Revision Control System (RCS)
=======================

  * Revision Control System (RCS)
    * Released in 1982
    * Created as an evolution of SCCS
    * Stored changes of files as a series of diffs
    * Very popular, still used today

[Wikipedia: Revision Control System](http://en.wikipedia.org/wiki/Revision_Control_System)

Pros and Cons of RCS
====================

  * Advantages
    * Dirt simple
    * Only need to know a few commands
    * Changesets stored as a series of diffs, so easy to view
    * File locking and branching supported
  * Disadvantages
    * Single files only
    * Cannot store entire projects
    * No security mechanisms - anyone can tamper with diffs
    * Branching sucks - everybody just locks the file

<% coderay :lang => :sh do %>
  co -l agenda.dog
  vim agenda.dog
  ci -u agenda.dog
<% end %>

!SLIDE

Centralized VCS
---------------

Modern VCS
==========

  * While early VCS systems were important, they were still lacking
  * No real support for multiple users
  * No support for project-wide version control
  * Make changes in foo.c and bar.c, and changes in one break the other
  * No way to look at both of the changes without black magic and/or shell scripts
  * Technologies started coming out to deal with this

Concurrent Verstion System (CVS)
================================

  * Behold! Another evolution!
  * CVS was the first client-server VCS
  * Built upon RCS
  * Tracks a set of files, or a project
  * Instead of just hacking on one file in a specific location, you check out a project
  * Support for multiple users simultaneously working on one project

Applications of CVS Today
=========================

  * Gentoo - portage
  * FreeBSD - ports
  * Various open source projects

Pros and Cons of CVS
====================

  * Advantages
    * ...I got nothing.
  * Disadvantages
    * Where do we start?
    * No moving/renaming of directories
    * No versioning of symbolic links
    * No unicode
    * No atomic commits
      * It'll commit enough changes to break everything!
    * CVS was used because it was the first, not because it was good.

!SLIDE

SVN
---

Apache Subversion (SVN)
=======================

  * Since CVS sucked so much, people wanted an alternative
  * SVN was designed as CVS without the problems
  * Widely adopted by the open source community
  * Support for a wide number of features

SVN Features
============

  * Support for Properties
    * On the fly keywording in the source - note the last changed date in a comment
    * Store mime-types
    * Store executable bit (*nix)
  * Sane branching
  * Support for authentication/authorization
  * Atomic commits
  * Sane file locking

Example SVN Structure
=====================

![svn](./images/svn/Subversion_project_visualization.png)

Pros and Cons of SVN
====================

  * Advantages
    * The most widely used VCS today
    * Robust and battle-tested
    * Fully centralized - collaboration is very easy
    * Support for branching and tagging
  * Disadvantages
    * Fully centralized - no offline work
    * Slow - network latency can increase time to work
      * Branches are expensive - make a full copy of the entire repository
      * Directly correlated, merging is a massive operation
    * Based on CVS

!SLIDE

Decentralized VCS
-----------------

Decentralized VCS
=================

  * Centralized VCS has many limitations
    * No offline work
    * Forking a project is not trivial
    * Centralized model is not always the best for a project
  * People started experimenting with a decentralized model

Differences between CVCS and DVCS
=================================

  * Differences
    * All working copies are branches
    * Most actions are local
    * Central repository can exist, but is not required
  * Advantages
    * Easy to fork and merge code
    * Network connectivity is not required to use DVCS
    * Resistant to failure
  * Disadvantages
    * Initial clone is costly, as it copies the entire repo
    * Added complexity
      * Ordering commits becomes much less straightforward

List of DVCS Tools
==================

  * Arch
  * Monotone
  * Darcs
  * Bazaar
  * Mercurial
  * **Git** (We like git)

!SLIDE

Git
---

Introduction to Git
===================

> "I'm an egotistical bastard, and I name all my projects after myself. First Linux, not git."
> - Linus Torvalds

  * Git is the heavyweight of the DVCS world
  * Open source DVCS created by Linux Torvalds, creator of the Linux kernel
  * Created to fill the gap left by a previous proprietary DVCS
  * The result of letting kernel hackers write a DVCS

The inspiration for Git
=======================

  * Git is a remarkable tool that had to fulfill a difficult set of obligations
  * Track the entire kernel history, with incredible amounts of information
  * Needed to be small, fast, and powerful
  * Designed to be the complete opposite of CVS

Characteristics of Git
======================

  * Designed for nonlinear development (Think kernel development)
  * Built for distributed and offline work
  * Built for speed and ability to handle large projects
  * Cryptographic authentication/verification

!SLIDE

Git as Magick, Part I
---------------------

Single Player Git
-----------------

Git - Creating a Project
========================

<% coderay :lang => :sh do %>
> git init
Initialized empty Git repository in /private/vcs_presentation/.git/
<% end %>

This creates a new project in the current directory.

<% coderay :lang => :sh do %>
> ls -la
total 264
drwx------  13 adrien  admin    442 Feb 24 17:52 ./
drwx------   9 adrien  admin    306 Feb 23 22:41 ../
drwx------  15 adrien  admin    510 Feb 24 17:52 .git/ <--- git init creates this file
-rw-------   1 adrien  admin    249 Feb 24 17:45 Makefile
drwx------   5 adrien  admin    170 Feb 24 17:45 images/
-rw-------   1 adrien  admin  14330 Feb 24 17:52 vcs_presentation.text
<% end %>

Git - adding a file
===================

<% coderay :lang => :sh do %>
git add example
<% end %>

Git - seeing the project status
===============================

<% coderay :lang => :sh do %>
> git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	example
nothing added to commit but untracked files present (use "git add" to track)
<% end %>

Git - seeing what content changed
=================================

<% coderay :lang => :sh do %>
> git diff example
diff --git c/example i/example
new file mode 100644
index 0000000..0996042
--- /dev/null
+++ i/example
@@ -0,0 +1 @@
+Fri Feb 24 18:00:29 PST 2012
<% end %>

Git - making your changes permanent
===================================

<% coderay :lang => :sh do %>
> git commit -m 'Check out my awesome commit!'
[master (root-commit) 6735123] Check out my awesome commit!
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 example
<% end %>

> But I'm afraid of commitment!

**GET OVER IT.**

With git, commit early, commit often. You can fix it after the fact.

Kind of.

Git - viewing the log of changes
================================

<% coderay :lang => :sh do %>
> git log
commit ccf7859df622b4f0f9e98bd38621f287f8a8218b
Author: Adrien Thebo <adrien@puppetlabs.com>
Date:   Fri Feb 24 17:59:22 2012 -0800

    better grepping
<% end %>

** OR **

<% coderay :lang => :sh do %>
> git log --oneline
697f7f4 Fixed a bug in NoteLineCount... not seriously...    [permalink]
ccf7859 better grepping
44897dd FIX
809722b It's getting late.
2ed809e Reorganize images
5e24310 pgsql is more strict, increase the hackiness up to 11
<% end %>

Git - viewing what actually changed
===================================

<% coderay :lang => :sh do %>
> git whatchanged -1
commit 67351233d0cad08ebbd4586da6a952d78a26ed5d
Author: Adrien Thebo <adrien@puppetlabs.com>
Date:   Fri Feb 24 18:02:22 2012 -0800

    Check out my awesome commit!

:000000 100644 0000000... 0996042... A  example
<% end %>

**OR**

<% coderay :lang => :sh do %>
> git whatchanged -1 -p
commit 67351233d0cad08ebbd4586da6a952d78a26ed5d
Author: Adrien Thebo <adrien@puppetlabs.com>
Date:   Fri Feb 24 18:02:22 2012 -0800

    Check out my awesome commit!

diff --git a/example b/example
new file mode 100644
index 0000000..0996042
--- /dev/null
+++ b/example
@@ -0,0 +1 @@
+Fri Feb 24 18:00:29 PST 2012
<% end %>

!SLIDE

Git as Magick, Part II
----------------------

Multiplayer Git with Github
---------------------------

Github - Copying a project locally
==================================

Cloning a project readonly
--------------------------

<% coderay :lang => :sh do %>
> git clone git://github.com/adrienthebo/worstprogramever
Cloning into worstprogramever...
remote: Counting objects: 20, done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 20 (delta 5), reused 9 (delta 1)
Receiving objects: 100% (20/20), done.
Resolving deltas: 100% (5/5), done.
<% end %>

Github - Cloning a project read/write
----------------------------

<% coderay :lang => :sh do %>
> git clone git@github.com:adrienthebo/worstprogramever
Cloning into worstprogramever...
remote: Counting objects: 20, done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 20 (delta 5), reused 9 (delta 1)
Receiving objects: 100% (20/20), done.
Resolving deltas: 100% (5/5), done.
<% end %>

Note the difference between the URLs; the former uses the git protocol, the
latter uses SSH.

Github - Making changes to a project
====================================

### Make your changes as normal...

<% coderay :lang => :sh do %>
> cd worstprogramever
> ls
Makefile	fail.c
> mvim README.markdown
> git add README.markdown
> git st
## master
A  README.markdown
> git ci
[master 3534eef] Added a README!
 1 files changed, 25 insertions(+), 0 deletions(-)
 create mode 100644 README.markdown
<% end %>

### And then run `git push`

<% coderay :lang => :sh do %>
> git push
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 605 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:adrienthebo/worstprogramever
   29e5bcd..3534eef  master -> master
<% end %>

!SLIDE

Git internals
-------------

Implementation
==============

  * Initially written as a "content addressable filesystem"
  * Simply put, you put stuff in it, and you get a key to retrieve data
  * You fetch that key, you get that data
  * Eventually a full set of utilities were written to interact with git
  * Has types of blob, tree, commit, and tag
  * Objects are identified by a SHA-1 hash

Why hash everything?
====================

  * Using hashes to identify parts of git repository may seem bizarre, but it adds a lot to git
  * Hashes ensure that nobody can tamper with any part of the repository without changing hashes
  * Allows for extremely fast retrieval of files
    * Instead of searching a series of files for some content, you look for a specific filename
    * Instead of slowing down git, using hashes speeds it up

Blob
====

  * A "blob" is used to store file data - it is generally a file
  * Only contains the contents of a file
  * No attributes like the file name are stored

![Blob](./images/git/object-blob.png)

Tree
====

  * A "tree" is basically like a directory
  * It references a bunch of other trees and/or blobs (i.e. files and sub-directories)
  * Trees store the metadata for the objects they point to, e.g. name, permissions, and content type

 ![Tree](./images/git/object-tree.png)

Commit
======

  * A "commit" points to a single tree, marking it as what the project looked like at a certain point in time.
  * Has the following components:
    * tree: The hash of a tree object that shows that the project looks like at the time of the commit
    * parent: the hash of the preceding commit, or commits
    * author: the person who actually created the content
    * committer: the person who made the actual commit
    * comment: a description of the commit

![Commit](./images/git/object-commit.png)

Tag
===

  * A tag is used to "annotate" a particular object
  * Commonly used to designate a specific commit, for things such as releases

![Tag](./images/git/object-tag.png)

Putting it all together
=======================

![Objects](./images/git/objects-example.png)

!SLIDE

Git concepts
------------

The working directory
=====================

  * The the directory containing your files in git is called the "working directory"
  * Any changes made to these are applied to the current branch
  * Nothing is absolute until you perform a git operation on it
  * Effectively a scratch space

References
==========

  * References are a way to track objects that are noteworthy
  * Simply a file containing a SHA1 hash
  * Lightweight tags are basically a reference and a tag object

The index
=========

  * The index, or staging area, is where you accumulate changes before a commit
  * This allows you to very carefully assemble commits
  * This is in contrast to SVN, where performing a commit adds all changes

Branches
========

  * Git is designed to let you have different versions fo the same codebase available
  * This lets you break up your work into discrete chunks very easily
  * The working directory is only the currently checked out branch, and switching it is very easy

!SLIDE

Using git
---------

Git workflow
============

![Workflow](./images/git/git-workflow.png)

Changing files with git
=======================

  * `git init` - Creates a git repository in the current working disrectory
  * `git add` - Adds the specified file to the index
  * `git rm` - Removes the file from the file system and adds the removal to the index
    * This is important, because git will not automatically remove files that you delete.
  * `git mv` - Renames the file - equivalent to `mv file1 file2; git rm file1; git add file2`
    * Remember that git doesn't track file names in a blob, so moves are tricky

Viewing git information
=======================

  * `git status` - Shows the status of the changed files
  * `git diff` - Shows the difference between two files, or the changes made to a file
  * `git log` - Shows the commit logs
  * `git blame` - Shows the author of every line in the file
  * `git bisect` - Search the git history for a specific commit

Branching and merging
=====================

  * `git branch` - Create, show and delete branches
  * `git checkout` - Create and switch branches
  * `git merge` - Merge the changes from one branch into the current branch

Making changes to the history
=============================

  * `git reset` - Restores the working copy to the most recent committed version
  * `git checkout` - Restores a single file in the working copy to the most recent committed version
  * `git commit` - Commits all the files in **index** into the repository
  * `git revert` - Undoes the most recent commit by adding a new commit, with all the changes reverted
  * `git cherry-pick` - Applies a single commit to your current branch
  * `git rebase` - Rewrite history

Collaboration
=============

  * `git clone` - Fetches a remote git repository and checks it out
  * `git fetch` - Fetches objects and reference from a remote repository
  * `git pull` - Fetches and merges objects and references from a remote repository
  * `git push` - Sends refs and remotes to a remote repository

!SLIDE

Advanced Git
------------

Git hooks
=========

  * Git allows you to customize behavior with hooks
    * Ensure that the code works before merging it
    * Deploy code elsewhere after a commit
    * Other actions that need to happen automatically

The really gory details
=======================

**THIS IS A SLIDE**

Other resources
===============

  * http://book-git-scm.com/1_the_git_object_model.html
  * http://progit.org/book
